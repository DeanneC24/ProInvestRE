name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest  # Use the latest version of Ubuntu as the runner
      
    steps:
    - name: Checkout Code
      uses: actions/checkout@v2

    - name: Run Node Tests
      working-directory: server
      run: |
        npm install
        npm test --coverage

    - name: Run React Tests
      working-directory: client
      run: |
        npm install
        npm test --coverage

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with: 
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and Publish Docker Compose
      env: 
        ELASTICSEARCH_CLOUD_ID: ${{ secrets.ELASTICSEARCH_CLOUD_ID }}
        ELASTICSEARCH_ADMIN_APIKEY: ${{ secrets.ELASTICSEARCH_ADMIN_APIKEY }}
        BACKEND_BASE_URL: ${{ secrets.BACKEND_BASE_URL }}
      run: |
        docker-compose -f docker-compose.yml build
        docker-compose -f docker-compose.yml push

    - name: Deploy to Render
      run: |
        curl --request POST \
              --url https://api.render.com/v1/services/${{ secrets.BACKEND_RENDER_SERVICE_ID }}/deploys \
              --header 'accept: application/json' \
              --header 'authorization: Bearer ${{ secrets.RENDER_TOKEN }}' \
              --header 'content-type: application/json' \
              --data '
         {
           "clearCache": "do_not_clear"
         }
         '
         curl --request POST \
              --url https://api.render.com/v1/services/${{ secrets.FRONTEND_RENDER_SERVICE_ID }}/deploys \
              --header 'accept: application/json' \
              --header 'authorization: Bearer ${{ secrets.RENDER_TOKEN }}' \
              --header 'content-type: application/json' \
              --data '
         {
           "clearCache": "do_not_clear"
         }
         '